library(devtools)
library(roxygen2)
devtools::create("optmThrGFA")
funcs <- list.files("R")
funcs <- substr(funcs, 1, nchar(funcs)-2)
relationTree <- matrix(nrow = length(funcs), ncol = length(funcs))
rownames(relationTree) <- funcs
colnames(relationTree) <- funcs
for(i in 1:length(funcs)){for(j in 1:length(funcs)){
used <- grep(funcs[j], readLines(paste0("R/", funcs[i],".R")))
relationTree[i,j] <- ifelse(length(used) > 0, 1, 0)
}}
library(optmThrGFA)
version
install.packages("GFA")
library(optmThrGFA)
relationTree.lay.tree
funcs <- list.files("R")
funcs <- substr(funcs, 1, nchar(funcs)-2)
relationTree <- matrix(nrow = length(funcs), ncol = length(funcs))
rownames(relationTree) <- funcs
colnames(relationTree) <- funcs
for(i in 1:length(funcs)){for(j in 1:length(funcs)){
used <- grep(funcs[j], readLines(paste0("R/", funcs[i],".R")))
relationTree[i,j] <- ifelse(length(used) > 0, 1, 0)
}}
diag(relationTree) <- 0
library(igraph)
no.edges <- which(colSums(relationTree) == 0 & rowSums(relationTree) == 0)
noedgeTree <- relationTree[no.edges, no.edges]
relationTree <- relationTree[-no.edges, -no.edges]
noedgeTree.mat <- as.matrix(noedgeTree)
noedgeTree.graph <- graph_from_adjacency_matrix(noedgeTree.mat, mode = "directed")
#noedgeTree.lay <- cbind(seq(-4,5,length.out = 8), rep(-1,8))
relationTree.mat <- as.matrix(relationTree)
relationTree.graph <- graph_from_adjacency_matrix(relationTree.mat, mode = "directed")
relationTree.lay.tree <- layout_as_tree(relationTree.graph, root = c("gfa_heatmap", "MSE_Grids", "rob_var_exp"))
setwd("/Volumes/T1000/Analysis/kforthman/optmThrGFA")
funcs <- list.files("R")
funcs <- substr(funcs, 1, nchar(funcs)-2)
relationTree <- matrix(nrow = length(funcs), ncol = length(funcs))
rownames(relationTree) <- funcs
colnames(relationTree) <- funcs
for(i in 1:length(funcs)){for(j in 1:length(funcs)){
used <- grep(funcs[j], readLines(paste0("R/", funcs[i],".R")))
relationTree[i,j] <- ifelse(length(used) > 0, 1, 0)
}}
diag(relationTree) <- 0
library(igraph)
no.edges <- which(colSums(relationTree) == 0 & rowSums(relationTree) == 0)
noedgeTree <- relationTree[no.edges, no.edges]
relationTree <- relationTree[-no.edges, -no.edges]
noedgeTree.mat <- as.matrix(noedgeTree)
noedgeTree.graph <- graph_from_adjacency_matrix(noedgeTree.mat, mode = "directed")
#noedgeTree.lay <- cbind(seq(-4,5,length.out = 8), rep(-1,8))
relationTree.mat <- as.matrix(relationTree)
relationTree.graph <- graph_from_adjacency_matrix(relationTree.mat, mode = "directed")
relationTree.lay.tree <- layout_as_tree(relationTree.graph, root = c("gfa_heatmap", "MSE_Grids", "rob_var_exp"))
funcs <- list.files("R")
funcs <- substr(funcs, 1, nchar(funcs)-2)
relationTree <- matrix(nrow = length(funcs), ncol = length(funcs))
rownames(relationTree) <- funcs
colnames(relationTree) <- funcs
for(i in 1:length(funcs)){for(j in 1:length(funcs)){
used <- grep(funcs[j], readLines(paste0("R/", funcs[i],".R")))
relationTree[i,j] <- ifelse(length(used) > 0, 1, 0)
}}
diag(relationTree) <- 0
library(igraph)
no.edges <- which(colSums(relationTree) == 0 & rowSums(relationTree) == 0)
noedgeTree <- relationTree[no.edges, no.edges]
relationTree <- relationTree[-no.edges, -no.edges]
noedgeTree.mat <- as.matrix(noedgeTree)
noedgeTree.graph <- graph_from_adjacency_matrix(noedgeTree.mat, mode = "directed")
#noedgeTree.lay <- cbind(seq(-4,5,length.out = 8), rep(-1,8))
relationTree.mat <- as.matrix(relationTree)
relationTree.graph <- graph_from_adjacency_matrix(relationTree.mat, mode = "directed")
relationTree.lay.tree <- layout_as_tree(relationTree.graph, root = c("gfa_heatmap", "MSE.Grids", "rob.var.exp"))
relationTree.lay.tre
View(relationTree.lay.tree)
relationTree.lay.tree[,2] <- relationTree.lay.tree[,2]+1
relationTree.lay.tree[relationTree.lay.tree[,2]==1,2] <- 0
plot.igraph(relationTree.graph %du% noedgeTree.graph,
#layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
relationTree.lay.tree[relationTree.lay.tree[,2]==-1,2] <- 1
plot.igraph(relationTree.graph %du% noedgeTree.graph,
#layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
plot.igraph(relationTree.graph %du% noedgeTree.graph,
layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
noedgeTree.lay <- cbind(seq(-4,5,length.out = 8), rep(-1,8))
noedgeTree.graph
noedgeTree.lay <- cbind(seq(-4,5,length.out = 5), rep(-1,8))
noedgeTree.lay <- cbind(seq(-4,5,length.out = 5), rep(-1,5))
relationTree.mat <- as.matrix(relationTree)
relationTree.graph <- graph_from_adjacency_matrix(relationTree.mat, mode = "directed")
relationTree.lay.tree <- layout_as_tree(relationTree.graph, root = c("gfa_heatmap", "MSE.Grids", "rob.var.exp"))
relationTree.lay.tree[,2] <- relationTree.lay.tree[,2]+1
relationTree.lay.tree[relationTree.lay.tree[,2]==1,2] <- 0
relationTree.lay.tree[relationTree.lay.tree[,2]==-1,2] <- 1
plot.igraph(relationTree.graph %du% noedgeTree.graph,
layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
relationTree.lay.tree[,2]
relationTree.lay.tree[,1]
noedgeTree.lay
relationTree.graph
relationTree.lay.tree <- layout_as_tree(relationTree.graph, root = c("gfa_heatmap", "MSE.Grids", "rob.var.exp"))
plot.igraph(relationTree.graph %du% noedgeTree.graph,
layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
relationTree.lay.tree
rbind(relationTree.lay.tree, noedgeTree.lay)
noedgeTree.lay <- cbind(seq(-4,5,length.out = 4), rep(-1,5))
noedgeTree.lay <- cbind(seq(-4,5,length.out = 4), rep(-1,4))
plot.igraph(relationTree.graph %du% noedgeTree.graph,
layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
plot.igraph(relationTree.graph %du% noedgeTree.graph,
#layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
as_adj_edge_list(relationTree)
as_adj_edge_list(relationTree.graph)
as_adj(relationTree.graph)
rowsums(as_adj(relationTree.graph))
rowsum(as_adj(relationTree.graph))
rowSums(as_adj(relationTree.graph))
rowSums(as_adj(relationTree.mat))
relationTree.mat
rowSums(relationTree.mat)
used
funcs
n.noedge <- dim(relationTree.mat)[1] - length(funcs)
dim(relationTree.mat)[1]
length(funcs)
n.noedge <- length(funcs) - dim(relationTree.mat)[1]
no.edges <- which(colSums(relationTree) == 0 & rowSums(relationTree) == 0)
noedgeTree <- relationTree[no.edges, no.edges]
relationTree <- relationTree[-no.edges, -no.edges]
relationTree.mat <- as.matrix(relationTree)
relationTree.graph <- graph_from_adjacency_matrix(relationTree.mat, mode = "directed")
relationTree.lay.tree <- layout_as_tree(relationTree.graph, root = c("gfa_heatmap", "MSE.Grids", "rob.var.exp"))
noedgeTree.mat <- as.matrix(noedgeTree)
noedgeTree.graph <- graph_from_adjacency_matrix(noedgeTree.mat, mode = "directed")
n.noedge <- length(funcs) - dim(relationTree.mat)[1]
noedgeTree.lay <- cbind(seq(-4,5,length.out = n.noedge), rep(-1,n.noedge))
funcs <- list.files("R")
funcs <- substr(funcs, 1, nchar(funcs)-2)
relationTree <- matrix(nrow = length(funcs), ncol = length(funcs))
rownames(relationTree) <- funcs
colnames(relationTree) <- funcs
for(i in 1:length(funcs)){for(j in 1:length(funcs)){
used <- grep(funcs[j], readLines(paste0("R/", funcs[i],".R")))
relationTree[i,j] <- ifelse(length(used) > 0, 1, 0)
}}
diag(relationTree) <- 0
library(igraph)
no.edges <- which(colSums(relationTree) == 0 & rowSums(relationTree) == 0)
noedgeTree <- relationTree[no.edges, no.edges]
relationTree <- relationTree[-no.edges, -no.edges]
relationTree.mat <- as.matrix(relationTree)
relationTree.graph <- graph_from_adjacency_matrix(relationTree.mat, mode = "directed")
relationTree.lay.tree <- layout_as_tree(relationTree.graph, root = c("gfa_heatmap", "MSE.Grids", "rob.var.exp"))
noedgeTree.mat <- as.matrix(noedgeTree)
noedgeTree.graph <- graph_from_adjacency_matrix(noedgeTree.mat, mode = "directed")
n.noedge <- length(funcs) - dim(relationTree.mat)[1]
noedgeTree.lay <- cbind(seq(-4,5,length.out = n.noedge), rep(-1,n.noedge))
#relationTree.lay.tree[,2] <- relationTree.lay.tree[,2]+1
#relationTree.lay.tree[relationTree.lay.tree[,2]==1,2] <- 0
#relationTree.lay.tree[relationTree.lay.tree[,2]==-1,2] <- 1
#png("Function_Map_tree.png",  width = 12, height = 12, res = 300, units = "in")
plot.igraph(relationTree.graph %du% noedgeTree.graph,
layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
#dev.off()
#png("Function_Map_tree.png",  width = 12, height = 12, res = 300, units = "in")
plot.igraph(relationTree.graph %du% noedgeTree.graph,
layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
relationTree.lay.tree[,2] <- relationTree.lay.tree[,2]+1
#png("Function_Map_tree.png",  width = 12, height = 12, res = 300, units = "in")
plot.igraph(relationTree.graph %du% noedgeTree.graph,
layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
relationTree.lay.tree[relationTree.lay.tree[,2]==1,2] <- 0
#png("Function_Map_tree.png",  width = 12, height = 12, res = 300, units = "in")
plot.igraph(relationTree.graph %du% noedgeTree.graph,
layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
relationTree.lay.tree[relationTree.lay.tree[,2]==-1,2] <- 1
#png("Function_Map_tree.png",  width = 12, height = 12, res = 300, units = "in")
plot.igraph(relationTree.graph %du% noedgeTree.graph,
layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
funcs <- list.files("R")
funcs <- substr(funcs, 1, nchar(funcs)-2)
relationTree <- matrix(nrow = length(funcs), ncol = length(funcs))
rownames(relationTree) <- funcs
colnames(relationTree) <- funcs
for(i in 1:length(funcs)){for(j in 1:length(funcs)){
used <- grep(funcs[j], readLines(paste0("R/", funcs[i],".R")))
relationTree[i,j] <- ifelse(length(used) > 0, 1, 0)
}}
diag(relationTree) <- 0
library(igraph)
no.edges <- which(colSums(relationTree) == 0 & rowSums(relationTree) == 0)
noedgeTree <- relationTree[no.edges, no.edges]
relationTree <- relationTree[-no.edges, -no.edges]
relationTree.mat <- as.matrix(relationTree)
relationTree.graph <- graph_from_adjacency_matrix(relationTree.mat, mode = "directed")
relationTree.lay.tree <- layout_as_tree(relationTree.graph, root = c("gfa_heatmap", "MSE.Grids", "rob.var.exp"))
noedgeTree.mat <- as.matrix(noedgeTree)
noedgeTree.graph <- graph_from_adjacency_matrix(noedgeTree.mat, mode = "directed")
n.noedge <- length(funcs) - dim(relationTree.mat)[1]
noedgeTree.lay <- cbind(seq(-4,5,length.out = n.noedge), rep(-1,n.noedge))
#png("Function_Map_tree.png",  width = 12, height = 12, res = 300, units = "in")
plot.igraph(relationTree.graph %du% noedgeTree.graph,
layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
#dev.off()
source('~/.active-rstudio-document')
png("FunctionMap/Function_Map_tree.png",  width = 12, height = 12, res = 300, units = "in")
plot.igraph(relationTree.graph %du% noedgeTree.graph,
layout = rbind(relationTree.lay.tree, noedgeTree.lay),
#edge.curved=rep(c(1,-1),sum(relationTree)),
edge.color = rep(yarrr::piratepal("basel"), sum(relationTree)))
dev.off()
source('/Volumes/T1000/Analysis/kforthman/optmThrGFA/FunctionMap/createFunctionMap.R')
# This line is necessary because the working directory does not need to be set when running this code on the server.
if(Sys.info()["nodename"] == "L00019154"){setwd("/Volumes/T1000/Analysis/kforthman/GWAS_Summary")}
source("Scripts/functions.R")
source('/Volumes/T1000/Analysis/kforthman/GWAS_Summary/Scripts/main.R')
